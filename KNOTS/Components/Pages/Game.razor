@page "/game"
@using System.Text.Json
@using Microsoft.JSInterop
@using KNOTS.Services
@inject IJSRuntime JSRuntime
@inject UserService UserService
@implements IAsyncDisposable
@rendermode InteractiveServer

<h3>You are now connected!</h3>

@if (string.IsNullOrEmpty(currentUsername))
{
    <div class="alert alert-warning">
        In order to connect to a game, you have to login.
        <br/>
        <a href="/" class="btn btn-primary mt-2">Go to Login</a>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <h5>Hello, @currentUsername</h5>
            @if (!string.IsNullOrEmpty(playerId))
            {
                <small class="text-muted">Your unique game ID: @playerId</small>
            }
        </div>
        <div class="card-body">
            @if (string.IsNullOrEmpty(currentRoomCode))
            {
                <!-- Room creation/joining -->
                <div class="row">
                    <div class="col-md-6">
                        <h6>Create a new game room</h6>
                        <button class="btn btn-primary" @onclick="CreateRoom" disabled="@isConnecting">
                            Create room
                        </button>
                    </div>
                    <div class="col-md-6">
                        <h6>Connect to an already existing room</h6>
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" @bind="roomCodeToJoin" 
                                   placeholder="Input room code" maxlength="4">
                            <button class="btn btn-success" @onclick="JoinRoom" disabled="@(isConnecting || string.IsNullOrEmpty(roomCodeToJoin))">
                                Connect
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- In a room -->
                <div class="alert alert-success">
                    <h6>You are currently in room: @currentRoomCode</h6>
                    <p>Connected players: @string.Join(", ", playersInRoom)</p>
                </div>

                <div class="mt-3">
                    <h6>Fill in your answers for the game</h6>
                    <NewGame @ref="newGameFormRef" Username="@currentUsername" />
                    
                    <button class="btn btn-primary mt-3" @onclick="SaveUserAnswers">
                        Save and Submit Answers
                    </button>
                </div>
                
                <!-- Game Messages -->
                @if (gameMessages.Any())
                {
                    <div class="mt-3">
                        <h6>Game Activity</h6>
                        <div class="border rounded p-2" style="max-height: 200px; overflow-y: auto;">
                            @foreach (var message in gameMessages.TakeLast(10))
                            {
                                <div class="small">@message</div>
                            }
                        </div>
                    </div>
                }
            }

            <!-- Status -->
            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(statusMessage.Contains("Error") ? "alert-danger" : "alert-info") mt-3">
                    @statusMessage
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "user")]
    public string? UsernameParam { get; set; }
    
    private DotNetObjectReference<Game>? objectReference;
    private string playerId = "";
    private string currentRoomCode = "";
    private string roomCodeToJoin = "";
    private string statusMessage = "";
    private bool isConnecting = false;
    private List<string> playersInRoom = new();
    private List<string> gameMessages = new();
    private string currentUsername = "";
    private NewGame? newGameFormRef;

    protected override void OnInitialized()
    {
        currentUsername = UsernameParam ?? UserService.CurrentUser ?? "";
        
        if (!string.IsNullOrEmpty(currentUsername))
        {
            isConnecting = true;
            statusMessage = "Connecting to server...";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(currentUsername))
        {
            try
            {
                await Task.Delay(500);

                objectReference = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("setBlazorGameComponent", objectReference);
            
                var connected = await JSRuntime.InvokeAsync<bool>("initializeGameConnection");
                if (connected)
                {
                    await JSRuntime.InvokeVoidAsync("joinGame", currentUsername);
                    statusMessage = "Connected to server!";
                }
                else
                {
                    statusMessage = "Error: Unable to connect to server";
                }
            
                isConnecting = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                statusMessage = $"Error: {ex.Message}";
                isConnecting = false;
                StateHasChanged();
            }
        }
    }

    private async Task CreateRoom()
    {
        isConnecting = true;
        statusMessage = "Creating room...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("createRoom", currentUsername);
    }

    private async Task JoinRoom()
    {
        isConnecting = true;
        statusMessage = $"Connecting to room {roomCodeToJoin}...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("joinRoom", roomCodeToJoin, currentUsername);
    }

    private async Task SendGameAction(string action, string data)
    {
        await JSRuntime.InvokeVoidAsync("sendGameAction", action, data);
        gameMessages.Add($"{DateTime.Now:HH:mm:ss} - You: {action}");
        StateHasChanged();
    }

    private void SaveUserAnswers()
    {
        if (newGameFormRef != null)
        {
            newGameFormRef.SaveAnswers();
            statusMessage = "Your answers have been saved!";
            StateHasChanged();
        }
        else
        {
            statusMessage = "Error: Form not initialized";
        }
    }

    // JavaScript callbacks - FIXED METHOD NAME
    [JSInvokable]
    public async Task OnPlayerIdAssigned(string id)
    {
        playerId = id;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnRoomCreated(string roomCode)
    {
        currentRoomCode = roomCode;
        statusMessage = $"Room created! Code: {roomCode}";
        playersInRoom.Clear();
        playersInRoom.Add(currentUsername);
        isConnecting = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnJoinedRoom(string roomInfoJson)
    {
        try
        {
            var roomInfo = JsonSerializer.Deserialize<RoomInfo>(roomInfoJson);
            currentRoomCode = roomInfo?.RoomCode ?? "";
            playersInRoom = roomInfo?.Players ?? new List<string>();
    
            statusMessage = "Successfully connected to room!";
            isConnecting = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            statusMessage = $"Error parsing room info: {ex.Message}";
            isConnecting = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    [JSInvokable]
    public async Task OnJoinRoomFailed(string message)
    {
        statusMessage = $"Error: {message}";
        isConnecting = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnPlayerJoinedRoom(string username)
    {
        if (!playersInRoom.Contains(username))
        {
            playersInRoom.Add(username);
        }
        gameMessages.Add($"{DateTime.Now:HH:mm:ss} - {username} connected to room");
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnPlayerLeft(string username)
    {
        playersInRoom.Remove(username);
        gameMessages.Add($"{DateTime.Now:HH:mm:ss} - {username} left the room");
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnGameAction(string username, string action, string data)
    {
        if (username != currentUsername)
        {
            gameMessages.Add($"{DateTime.Now:HH:mm:ss} - {username}: {action}");
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (objectReference != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("disconnectFromGame");
            }
            catch { /* Ignore errors during disposal */ }
            
            objectReference.Dispose();
        }
    }
    
    public class RoomInfo
    {
        public string RoomCode { get; set; } = "";
        public List<string> Players { get; set; } = new();
    }
}