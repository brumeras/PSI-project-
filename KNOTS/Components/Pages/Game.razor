@page "/game"
@using System.Text.Json
@using Microsoft.JSInterop
@using KNOTS.Services
@inject IJSRuntime JSRuntime
@inject UserService UserService
@inject CompatibilityService CompatibilityService
@inject GameRoomService GameRoomService
@implements IAsyncDisposable
@rendermode InteractiveServer

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
<script src="/js/gameclient.js"></script>

<h3>You are now connected!</h3>

@if (!UserService.IsAuthenticated)
{
    <div class="alert alert-warning">
        In order to connect to a game, you have to login.
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <h5>Hello, @UserService.CurrentUser!</h5>
            @if (!string.IsNullOrEmpty(playerId))
            {
                <small class="text-muted">Your unique game ID: @playerId</small>
            }
        </div>
        <div class="card-body">
            @if (string.IsNullOrEmpty(currentRoomCode))
            {
                <!-- Kambario sukūrimas/prisijungimas -->
                <div class="row">
                    <div class="col-md-6">
                        <h6>Create a new game room</h6>
                        <button class="btn btn-primary" @onclick="CreateRoom" disabled="@isConnecting">
                            Create room
                        </button>
                    </div>
                    <div class="col-md-6">
                        <h6>Connect to an already existing room</h6>
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" @bind="roomCodeToJoin" 
                                   placeholder="Input room code" maxlength="4">
                            <button class="btn btn-success" @onclick="JoinRoom" disabled="@(isConnecting || string.IsNullOrEmpty(roomCodeToJoin))">
                                Connect
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (showResults)
            {
                <!-- REZULTATŲ EKRANAS -->
                <GameResults 
                    RoomCode="@currentRoomCode" 
                    CurrentUsername="@UserService.CurrentUser"
                    OnResultsSaved="HandleResultsSaved" />
            }
            else
            {
                <!-- ŽAIDIMAS -->
                <div class="alert alert-success">
                    <h6>You are currently in room: @currentRoomCode</h6>
                    <p>Other connected players: @string.Join(", ", playersInRoom)</p>
                </div>

                <!-- STATUS CHECK - PRIEŠ NewGame komponentą -->
                @if (newGameFormRef != null && newGameFormRef.IsComplete())
                {
                    <div class="alert alert-info text-center mb-3">
                        <h5>You've completed all questions!</h5>
                        @if (allPlayersFinished)
                        {
                            <p>All players have finished. Click below to see results!</p>
                            <button class="btn btn-success btn-lg" @onclick="ShowResults">
                                View Results
                            </button>
                        }
                        else
                        {
                            <p>Waiting for other players to finish...</p>
                            <button class="btn btn-outline-primary" @onclick="CheckIfAllFinished">
                                Check Status
                            </button>
                            <div class="mt-2">
                                <small class="text-muted">
                                    Progress: @GetPlayersFinishedCount() / @playersInRoom.Count players finished
                                </small>
                            </div>
                        }
                    </div>
                }

                <div class="mt-3">
                    <h6>Fill in your answers for the game</h6>
                    <NewGame @ref="newGameFormRef" RoomCode="@currentRoomCode" />
                </div>
            }
            
            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(statusMessage.Contains("Error") ? "alert-danger" : "alert-info") mt-3">
                    @statusMessage
                </div>
            }
        </div>
    </div>
}

@code {
    private DotNetObjectReference<Game>? objectReference;
    private string playerId = "";
    private string currentRoomCode = "";
    private string roomCodeToJoin = "";
    private string statusMessage = "";
    private bool isConnecting = false;
    private bool showResults = false;
    private bool allPlayersFinished = false;
    private List<string> playersInRoom = new();
    private List<string> gameMessages = new();
    private NewGame? newGameFormRef;
    private System.Threading.Timer? statusCheckTimer;

    protected override void OnInitialized()
    {
        if (UserService.IsAuthenticated)
        {
            isConnecting = true;
            statusMessage = "Connecting to server...";
        }
        
        // Auto-check every 3 seconds
        statusCheckTimer = new System.Threading.Timer(async _ => 
        {
            if (!string.IsNullOrEmpty(currentRoomCode) && !showResults)
            {
                await InvokeAsync(() => 
                {
                    CheckIfAllFinished();
                    StateHasChanged();
                });
            }
        }, null, TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && UserService.IsAuthenticated)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                if (!window.signalRLoaded) {
                    var script1 = document.createElement('script');
                    script1.src = 'https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js';
                    document.head.appendChild(script1);
                    
                    var script2 = document.createElement('script');
                    script2.src = '/js/gameclient.js';
                    document.head.appendChild(script2);
                    
                    window.signalRLoaded = true;
                }
            ");
                
                await Task.Delay(1000);

                objectReference = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("setBlazorGameComponent", objectReference);
            
                var connected = await JSRuntime.InvokeAsync<bool>("initializeGameConnection");
                if (connected)
                {
                    await JSRuntime.InvokeVoidAsync("joinGame", UserService.CurrentUser);
                    statusMessage = "Connected to server!";
                }
                else
                {
                    statusMessage = "Error: Unable to connect to server";
                }
            
                isConnecting = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                statusMessage = $"Error: {ex.Message}";
                isConnecting = false;
                StateHasChanged();
            }
        }
    }

    private async Task CreateRoom()
    {
        isConnecting = true;
        statusMessage = "Creating room...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("createRoom", UserService.CurrentUser);
    }

    private async Task JoinRoom()
    {
        isConnecting = true;
        statusMessage = $"Connecting to a room {roomCodeToJoin}...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("joinRoom", roomCodeToJoin, UserService.CurrentUser);
    }

    private void CheckIfAllFinished()
    {
        if (string.IsNullOrEmpty(currentRoomCode)) return;
        
        var players = GameRoomService.GetRoomPlayerUsernames(currentRoomCode);
        
        if (players.Count == 0) return;
        
        allPlayersFinished = CompatibilityService.HaveAllPlayersFinished(
            currentRoomCode, 
            players, 
            10
        );
        
        Console.WriteLine($"CheckIfAllFinished: {allPlayersFinished} (Players: {players.Count})");
        
        if (allPlayersFinished)
        {
            statusMessage = "All players finished! You can now view results.";
        }
    }
    
    private int GetPlayersFinishedCount()
    {
        if (string.IsNullOrEmpty(currentRoomCode)) return 0;
        
        var players = GameRoomService.GetRoomPlayerUsernames(currentRoomCode);
        int finishedCount = 0;
        
        foreach (var player in players)
        {
            var swipes = CompatibilityService.GetPlayerSwipes(currentRoomCode, player);
            if (swipes.Count >= 10)
            {
                finishedCount++;
            }
        }
        
        return finishedCount;
    }
    
    private void ShowResults()
    {
        CheckIfAllFinished();
        
        if (allPlayersFinished)
        {
            showResults = true;
            statusMessage = "";
            statusCheckTimer?.Dispose();
        }
        else
        {
            statusMessage = "Please wait for all players to finish before viewing results.";
        }
    }
    
    private void HandleResultsSaved()
    {
        statusMessage = "Results saved! You can view them in the Activity page.";
        showResults = false;
        currentRoomCode = "";
        playersInRoom.Clear();
        allPlayersFinished = false;
        StateHasChanged();
    }
    
    [JSInvokable]
    public async Task OnPlayerIdAssigned(string id)
    {
        playerId = id;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnRoomCreated(string roomCode)
    {
        currentRoomCode = roomCode;
        statusMessage = $"Room created! Code: {roomCode}";
        playersInRoom.Clear();
        playersInRoom.Add(UserService.CurrentUser ?? "");
        isConnecting = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnJoinedRoom(string roomInfoJson)
    {
        Console.WriteLine($"OnJoinedRoom called with: {roomInfoJson}");
    
        var roomInfo = JsonSerializer.Deserialize<RoomInfo>(roomInfoJson, new JsonSerializerOptions 
        { 
            PropertyNameCaseInsensitive = true 
        });
    
        currentRoomCode = roomInfo?.RoomCode ?? "";
        playersInRoom = roomInfo?.Players ?? new List<string>();
        roomCodeToJoin = "";
    
        statusMessage = "Successfully connected to a room!";
        isConnecting = false;
    
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnJoinRoomFailed(string message)
    {
        statusMessage = $"Error: {message}";
        isConnecting = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnPlayerJoinedRoom(string username)
    {
        if (!playersInRoom.Contains(username))
        {
            playersInRoom.Add(username);
        }
        gameMessages.Add($"{DateTime.Now:HH:mm:ss} - {username} connected to room");
        
        CheckIfAllFinished();
        
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnPlayerLeft(string username)
    {
        playersInRoom.Remove(username);
        gameMessages.Add($"{DateTime.Now:HH:mm:ss} - {username} left the room");
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnGameAction(string username, string action, string data)
    {
        if (username != UserService.CurrentUser)
        {
            gameMessages.Add($"{DateTime.Now:HH:mm:ss} - {username}: {action} {data}");
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        statusCheckTimer?.Dispose();
        
        if (objectReference != null)
        {
            await JSRuntime.InvokeVoidAsync("disconnectFromGame");
            objectReference.Dispose();
        }
    }
    
    public class RoomInfo
    {
        public string RoomCode { get; set; } = "";
        public List<string> Players { get; set; } = new();
    }
}