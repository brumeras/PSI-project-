@inject KNOTS.Services.UserService UserService
@using System.IO
@using System.Text.Json
@rendermode InteractiveServer

<h3>Fill in your answers for the game</h3>

@if (UserService.IsAuthenticated)
{
    <div class="mb-3">
        <label class="form-label">Your Name:</label>
        <input class="form-control" @bind="PlayerName" placeholder="Enter your name" disabled />
    </div>
}
else
{
    <div class="mb-3">
        <label class="form-label">Your Name:</label>
        <input class="form-control" @bind="PlayerName" placeholder="Enter your name" />
    </div>
}

<hr />

@for (int i = 0; i < Questions.Length && i < Answers.Length; i++)
{
    var index = i;
    <div class="mb-3">
        <label class="form-label"><strong>@(index + 1). @Questions[index]</strong></label>
        <input class="form-control" value="@Answers[index]" @oninput="e => Answers[index] = e.Value?.ToString()" placeholder="Type your answer..." />
    </div>
}

<button type="button" class="btn btn-primary" @onclick="SaveAnswers">Save Answers</button>

@if (!string.IsNullOrEmpty(SavedFilePath))
{
    <div class="alert alert-success mt-3" role="alert">
        ✅ Answers saved successfully to @SavedFilePath
    </div>
}
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        ❌ @statusMessage
    </div>
}

@code {
    private string PlayerName { get; set; } = "";
    private string[] Answers;

    private string[] Questions { get; } =
    {
        "What is your favorite movie?",
        "If you could travel anywhere, where would you go?",
        "What is one thing you can't live without?",
        "What was your childhood dream job?",
        "What's your favorite hobby?"
    };

    private string SavedFilePath { get; set; }
    private string statusMessage = string.Empty;

    protected override void OnInitialized()
    {
        Answers = new string[Questions.Length];

        if (UserService.IsAuthenticated)
        {
            PlayerName = UserService.CurrentUser;
        }
    }

    public void SaveAnswers()
    {
        if (string.IsNullOrWhiteSpace(PlayerName))
        {
            statusMessage = "Player name is required.";
            SavedFilePath = string.Empty;
            return;
        }

        // Check if all answers are filled
        if (Answers.Any(string.IsNullOrWhiteSpace))
        {
            statusMessage = "Please answer all questions before saving.";
            SavedFilePath = string.Empty;
            return;
        }

        try
        {
            string filePath = Path.Combine(Directory.GetCurrentDirectory(),  "answers.json");
            
            // Create directory if it doesn't exist
            var directory = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            // Read existing data or create new list
            List<PlayerAnswers> allPlayersAnswers;
            
            if (File.Exists(filePath))
            {
                try
                {
                    string existingJson = File.ReadAllText(filePath);
                    allPlayersAnswers = JsonSerializer.Deserialize<List<PlayerAnswers>>(existingJson) ?? new List<PlayerAnswers>();
                }
                catch
                {
                    // If file is corrupted, start fresh
                    allPlayersAnswers = new List<PlayerAnswers>();
                }
            }
            else
            {
                allPlayersAnswers = new List<PlayerAnswers>();
            }

            // Remove existing entry for this player if exists
            allPlayersAnswers.RemoveAll(p => p.Username.Equals(PlayerName, StringComparison.OrdinalIgnoreCase));

            // Add new entry
            var playerData = new PlayerAnswers
            {
                Username = PlayerName,
                Answers = Answers.ToList(),
                Timestamp = DateTime.Now
            };

            allPlayersAnswers.Add(playerData);

            // Save to file
            string json = JsonSerializer.Serialize(allPlayersAnswers, new JsonSerializerOptions
            {
                WriteIndented = true
            });

            File.WriteAllText(filePath, json);
            
            SavedFilePath = filePath;
            statusMessage = string.Empty;
            
            Console.WriteLine($"Answers saved successfully to: {filePath}");
            Console.WriteLine($"File content: {json}");
        }
        catch (Exception ex)
        {
            statusMessage = $"Error saving answers: {ex.Message}";
            SavedFilePath = string.Empty;
            Console.WriteLine($"Error saving answers: {ex}");
        }
    }

    public class PlayerAnswers
    {
        public string Username { get; set; } = "";
        public List<string> Answers { get; set; } = new();
        public DateTime Timestamp { get; set; }
    }
}