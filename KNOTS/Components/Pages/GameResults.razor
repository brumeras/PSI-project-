@using KNOTS.Services
@inject CompatibilityService CompatibilityService
@inject GameRoomService GameRoomService

<div class="results-container">
    @if (isCalculating)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Calculating compatibility...</span>
            </div>
            <p class="mt-2">Analyzing your answers...</p>
        </div>
    }
    else if (compatibilityResults != null && compatibilityResults.Any())
    {
        <div class="card shadow-lg">
            <div class="card-header bg-primary text-white text-center">
                <h3>Compatibility Results</h3>
                <p class="mb-0">Room: @RoomCode</p>
            </div>
            <div class="card-body">
                <h5 class="mb-4">Top Matches:</h5>
                
                @for (int i = 0; i < compatibilityResults.Count; i++)
                {
                    var result = compatibilityResults[i];
                    var medal = i == 0 ? "🥇" : i == 1 ? "🥈" : i == 2 ? "🥉" : "";
                    
                    <div class="result-card mb-3 @(i == 0 ? "best-match" : "")">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="mb-0">
                                @medal @result.Player1 & @result.Player2
                            </h5>
                            <span class="badge @GetBadgeColor(result.Percentage) fs-5">
                                @result.Percentage%
                            </span>
                        </div>
                        
                        <div class="progress mb-2" style="height: 30px;">
                            <div class="progress-bar @GetProgressBarColor(result.Percentage)" 
                                 role="progressbar" 
                                 style="width: @result.Percentage%">
                                @result.MatchingSwipes / @result.TotalStatements matches
                            </div>
                        </div>
                        
                        @if (result.MatchedStatements.Any())
                        {
                            <button class="btn btn-sm btn-outline-secondary" 
                                    @onclick="() => ToggleDetails(i)">
                                @(expandedIndex == i ? "Hide" : "Show") matched statements
                            </button>
                            
                            @if (expandedIndex == i)
                            {
                                <div class="matched-statements mt-2">
                                    <small class="text-muted">You both agreed on:</small>
                                    <ul class="mt-2">
                                        @foreach (var statement in result.MatchedStatements)
                                        {
                                            <li>@statement</li>
                                        }
                                    </ul>
                                </div>
                            }
                        }
                    </div>
                }
                
                <!-- My Matches Section -->
                @if (!string.IsNullOrEmpty(CurrentUsername))
                {
                    var myMatches = compatibilityResults
                        .Where(r => r.Player1 == CurrentUsername || r.Player2 == CurrentUsername)
                        .OrderByDescending(r => r.Percentage)
                        .ToList();
                    
                    @if (myMatches.Any())
                    {
                        <hr class="my-4" />
                        <h5 class="mb-3">Your Personal Matches:</h5>
                        
                        @foreach (var match in myMatches)
                        {
                            var otherPlayer = match.Player1 == CurrentUsername ? match.Player2 : match.Player1;
                            
                            <div class="my-match-card">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>You & @otherPlayer</strong>
                                    </div>
                                    <div>
                                        <span class="badge @GetBadgeColor(match.Percentage)">
                                            @match.Percentage%
                                        </span>
                                        <small class="text-muted ms-2">
                                            (@match.MatchingSwipes/@match.TotalStatements)
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
                
                <div class="text-center mt-4">
                    <button class="btn btn-primary" @onclick="SaveToHistory">
                        Save Results & Finish
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i> No compatibility results available. 
            Make sure all players have answered the questions.
        </div>
    }
</div>

<style>
    .results-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .result-card {
        padding: 20px;
        border: 2px solid #dee2e6;
        border-radius: 10px;
        background-color: #f8f9fa;
    }

    .best-match {
        border-color: #ffd700;
        background: linear-gradient(135deg, #fffbea 0%, #fff9db 100%);
    }

    .matched-statements {
        padding: 10px;
        background-color: white;
        border-radius: 5px;
        border: 1px solid #dee2e6;
    }

    .matched-statements ul {
        margin-bottom: 0;
        padding-left: 20px;
    }

    .my-match-card {
        padding: 15px;
        background-color: #e7f3ff;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid #0d6efd;
    }
</style>

@code {
    [Parameter]
    public string? RoomCode { get; set; }
    
    [Parameter]
    public string? CurrentUsername { get; set; }
    
    [Parameter]
    public EventCallback OnResultsSaved { get; set; }
    
    private List<CompatibilityScore>? compatibilityResults;
    private bool isCalculating = false;
    private int expandedIndex = -1;
    
    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(RoomCode))
        {
            CalculateResults();
        }
    }
    
    private void CalculateResults()
    {
        isCalculating = true;
        StateHasChanged();
        
        try
        {
            var players = GameRoomService.GetRoomPlayerUsernames(RoomCode ?? "");
            
            if (players.Count >= 2)
            {
                compatibilityResults = CompatibilityService.CalculateAllCompatibilities(
                    RoomCode ?? "", 
                    players
                );
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating results: {ex.Message}");
        }
        finally
        {
            isCalculating = false;
            StateHasChanged();
        }
    }
    
    private void ToggleDetails(int index)
    {
        expandedIndex = expandedIndex == index ? -1 : index;
    }
    
    private string GetProgressBarColor(double percentage)
    {
        if (percentage >= 80) return "bg-success";
        if (percentage >= 60) return "bg-info";
        if (percentage >= 40) return "bg-warning";
        return "bg-danger";
    }
    
    private string GetBadgeColor(double percentage)
    {
        if (percentage >= 80) return "bg-success";
        if (percentage >= 60) return "bg-info";
        if (percentage >= 40) return "bg-warning";
        return "bg-danger";
    }
    
    private async Task SaveToHistory()
    {
        if (!string.IsNullOrEmpty(RoomCode))
        {
            var players = GameRoomService.GetRoomPlayerUsernames(RoomCode);
            CompatibilityService.SaveGameToHistory(RoomCode, players);
            CompatibilityService.ClearRoomData(RoomCode);
            
            await OnResultsSaved.InvokeAsync();
        }
    }
}